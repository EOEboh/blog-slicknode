#
# Example schema definition for the module @private/blog
# Define the data model and API schema for the module here.
#
# Learn more about modeling your content in the docs: https://slicknode.com/docs/

# Example: Basic type without advanced content management functionality (no `Content` interface)
type Emmanuel_Page implements Node {
  id: ID!
  title: String!
  slug: String @unique
  text: String @input(type: MARKDOWN)
}

# ------
# Example with content management functionality enabled:
#
# Note: If you are using the `Content` interface, make sure you have the `content`
# module installed: `slicknode module add content`
#
#type Emmanuel_Post implements Node & Content {
#  id: ID!
#
#  title: String!
#  slug: String @unique
#  text: String @input(type: MARKDOWN)
#
#  # Fields of Content interface to advanced enable CMS functionality (i18n, publishing workflow, etc.):
#
#  contentNode: ContentNode!
#  locale: Locale!
#  status: ContentStatus!
#  publishedAt: DateTime
#  publishedBy: User
#  createdAt: DateTime!
#  createdBy: User
#  lastUpdatedAt: DateTime
#  lastUpdatedBy: User
#}
#
#type Emmanuel_Category implements Node & Content {
#  id: ID!
#
#  name: String!
#  slug: String! @unique
#
#  # Fields of Content interface to enable CMS functionality (i18n, publishing workflow, etc.):
#
#  contentNode: ContentNode!
#  locale: Locale!
#  status: ContentStatus!
#  publishedAt: DateTime
#  publishedBy: User
#  createdAt: DateTime!
#  createdBy: User
#  lastUpdatedAt: DateTime
#  lastUpdatedBy: User
#}
#
# -----
# Example custom resolver
#
# extend type Query {
#   Emmanuel_hello(name: String): String
# }

type Emmanuel_Article implements Node & Content {
  id: ID!
  title: String!
  slug: String! @unique
  mainImage: Image
  text: String! @input(type: MARKDOWN)
  category: Emmanuel_Category!

  # `Content` interface fields for advanced content managment functionality
  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  publishedAt: DateTime
  publishedBy: User
  createdAt: DateTime!
  createdBy: User
  lastUpdatedAt: DateTime
  lastUpdatedBy: User
}

type Emmanuel_Category implements Node {
  id: ID!
  name: String!
  slug: String! @unique
}